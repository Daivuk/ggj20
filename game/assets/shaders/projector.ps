input float2 inUV;
input float4 inColor;

Texture0 texDiffuse
{
    filter = nearest;
    repeat = clamp;
}

Texture1 texNormal
{
    filter = nearest;
    repeatY = clamp;
}

Texture2 texDepth
{
    filter = nearest;
    repeatY = clamp;
}

Texture3 texProjector
{
    filter = linear;
    repeatY = clamp;
}

extern float3 lPos;
extern float3 lColor;
extern float lRadius;
extern matrix transform;

float3 LightPass(float3 pos, float3 normal, float3 lpos, float lradius, float3 lcolor)
{
    float3 dir = lpos - pos;
    float dis = length(dir);
    dir /= dis;
    float intensity = 1 - dis / lradius;
    intensity = clamp(intensity, 0, 1);
    intensity = pow(intensity, 2);
    float dotNormal = clamp(dot(normal, dir), 0, 1);
    intensity *= dotNormal;

    return lcolor * intensity;
}

void main()
{
    float4 tdiffuse = texDiffuse(inUV);
    float4 tnormal = texNormal(inUV);
    float4 tdepth = texDepth(inUV);
    float4 tprojector = texProjector(inUV);

    oColor = tdiffuse;

    oColor.rgb *= LightPass(tdepth.xyz * 20.0, tnormal.xyz * 2.0 - 1.0, lPos, lRadius, lColor);
}
