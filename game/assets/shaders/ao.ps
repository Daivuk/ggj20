input float2 inUV;
input float4 inColor;

Texture0 texDiffuse
{
    filter = nearest;
    repeat = clamp;
}

Texture1 texNormal
{
    filter = nearest;
    repeat = clamp;
}

Texture2 texDepth
{
    filter = nearest;
    repeat = clamp;
}

Texture3 texNoise
{
    filter = nearest;
    repeat = wrap;
}

extern matrix viewProj;
extern matrix invProjMtx;
extern float2 noiseScale;

const float kernelCount = 64;
const float radius = 0.25;
const float bias = 0.05;
const float3 kernels[kernelCount] = {
    float3(-0.0391029454767704,-0.013866418972611427,-0.002039915882050991),
    float3(-0.004386025480926037,-0.027450518682599068,-0.0067792488262057304),
    float3(0.00026320110191591084,-0.013252894394099712,0.005796147510409355),
    float3(-0.0050324262119829655,0.015501029789447784,-0.0005721828201785684),
    float3(0.028257178142666817,-0.07997412979602814,0.03490697965025902),
    float3(-0.07173314690589905,0.019874989986419678,-0.0333067961037159),
    float3(-0.01870855875313282,-0.011323376558721066,0.006201812531799078),
    float3(-0.03271925076842308,0.05882362648844719,0.07106788456439972),
    float3(-0.01840566284954548,-0.06369120627641678,0.056301314383745193),
    float3(-0.005152369383722544,-0.0008668949012644589,-0.0012239777715876698),
    float3(0.032798610627651215,-0.029806332662701607,0.05261255428195),
    float3(0.11175897717475891,-0.028746366500854492,0.0012064308393746614),
    float3(-0.02998734824359417,-0.020315246656537056,0.009101318195462227),
    float3(-0.045397259294986725,0.053832147270441055,0.040717389434576035),
    float3(-0.029269622638821602,-0.07116632908582687,0.034269072115421295),
    float3(0.05856531485915184,-0.048468075692653656,-0.04425203800201416),
    float3(0.0858611911535263,0.09245362877845764,-0.07096393406391144),
    float3(-0.01664186455309391,0.02099386416375637,-0.02306409738957882),
    float3(0.06588628888130188,-0.06546264886856079,-0.011843749321997166),
    float3(-0.022811220958828926,-0.039412569254636765,0.004235406406223774),
    float3(-0.0010217598173767328,0.024089429527521133,-0.024206018075346947),
    float3(-0.020758146420121193,0.02598915621638298,0.01835174858570099),
    float3(0.0025777879636734724,-0.0022504644002765417,0.008916734717786312),
    float3(0.05014938488602638,-0.05048959702253342,0.057565975934267044),
    float3(-0.003657837165519595,0.0043964991346001625,-0.007271990180015564),
    float3(-0.036170925945043564,-0.06421687453985214,-0.07913579791784286),
    float3(-0.06327223032712936,0.13562870025634766,0.06929498165845871),
    float3(0.07486231625080109,0.050170086324214935,0.012900032103061676),
    float3(0.10393039137125015,-0.15003424882888794,-0.14513684809207916),
    float3(0.12994921207427979,-0.09268244355916977,0.13448555767536163),
    float3(0.04688375070691109,-0.05092725157737732,-0.06927316635847092),
    float3(0.06335373967885971,-0.024372898042201996,0.022249627858400345),
    float3(-0.02279180847108364,-0.14726589620113373,0.15341521799564362),
    float3(-0.0387660413980484,0.12737734615802765,0.006391122471541166),
    float3(-0.15805287659168243,0.1486000269651413,0.03428009897470474),
    float3(-0.006349407602101564,0.003754616715013981,0.028961487114429474),
    float3(0.08558881282806396,-0.08358562737703323,0.029527250677347183),
    float3(0.011734516359865665,-0.20673170685768127,-0.176364928483963),
    float3(0.00005799670179840177,0.012013242579996586,0.02375319041311741),
    float3(-0.2889476716518402,-0.28596270084381104,-0.08878416568040848),
    float3(0.09643162041902542,-0.2859043478965759,0.04459250345826149),
    float3(-0.16870495676994324,-0.040702935308218,-0.1857641339302063),
    float3(-0.02125340886414051,0.018942320719361305,-0.004474214743822813),
    float3(-0.016076305881142616,-0.004447139333933592,0.04799406975507736),
    float3(0.32554423809051514,-0.4084703326225281,-0.04617507755756378),
    float3(-0.13459840416908264,0.027631310746073723,-0.21372102200984955),
    float3(-0.14314314723014832,-0.19539430737495422,0.21065053343772888),
    float3(0.20645248889923096,0.2261347621679306,-0.12657830119132996),
    float3(-0.3392064571380615,0.3307138979434967,0.35038185119628906),
    float3(-0.007108012679964304,-0.020726902410387993,-0.0033915170934051275),
    float3(0.4316202402114868,0.05675065144896507,-0.4026680588722229),
    float3(-0.0013362549943849444,-0.5074644088745117,0.13787394762039185),
    float3(0.4539000988006592,-0.05656960979104042,-0.47075334191322327),
    float3(0.08750882744789124,0.015221071429550648,-0.18534637987613678),
    float3(-0.26532071828842163,-0.0968291312456131,0.5956600904464722),
    float3(0.14782428741455078,-0.09292908757925034,-0.08289174735546112),
    float3(-0.161400705575943,0.007895066402852535,-0.04816867411136627),
    float3(0.11835382133722305,-0.12199971079826355,0.430377334356308),
    float3(-0.18674854934215546,0.5629361867904663,-0.3500335216522217),
    float3(-0.024564284831285477,-0.08222611993551254,0.01821219176054001),
    float3(0.08752895146608353,-0.042801886796951294,0.04069751501083374),
    float3(0.46374720335006714,-0.31914567947387695,-0.0308829452842474),
    float3(0.17383505403995514,0.32876288890838623,-0.2025924026966095),
    float3(0.5890100002288818,0.38136857748031616,-0.4548138678073883)
};

void main()
{
    float4 tdiffuse = texDiffuse(inUV);
    float4 tnormal = texNormal(inUV);
    float depth = texDepth(inUV).r;
    float3 noise = texNoise(inUV * noiseScale).rgb;

    // Position
    float4 position = float4(float2(inUV.x, 1 - inUV.y) * 2.0 - 1.0, depth, 1.0);
    position = mul(position, invProjMtx);
    position /= position.w;
    depth *= position.w;

    // normal
    float3 normal = tnormal.xyz * 2.0 - 1.0;

    // Samples
    float occlusion = 0.0;
    for (float i = 0.0; i < kernelCount; ++i)
    {
        float3 kernel = kernels[i];
        float len = length(kernel);
        if (dot(kernel / len, normal) <= 0.0) continue;
        float4 samplePos = float4(position.xyz + kernels[i] * radius, 1);
        float4 screenSpace = mul(samplePos, viewProj);
        screenSpace /= screenSpace.w;
        float sampleDepth = texDepth(float2(screenSpace.x, -screenSpace.y) * 0.5 + 0.5).r * screenSpace.w;

        float rangeCheck = smoothstep(0.0, 1.0, radius / abs(depth - sampleDepth));
        if (sampleDepth < depth) occlusion += rangeCheck * (1 - len);
    }
    occlusion /= kernelCount * 0.5;

    oColor = float4(0.0, 0.0, 0.0, occlusion * tdiffuse.a);
}
